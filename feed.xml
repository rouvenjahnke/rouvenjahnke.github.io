<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="https://rouvenjahnke.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://rouvenjahnke.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-04-27T16:34:06+00:00</updated><id>https://rouvenjahnke.github.io/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">The MaPhy-Club: A New Mathematical Journey on YouTube</title><link href="https://rouvenjahnke.github.io/blog/2025/the-maphy-club-a-new-mathematical-journey-on-youtube/" rel="alternate" type="text/html" title="The MaPhy-Club: A New Mathematical Journey on YouTube"/><published>2025-04-16T20:31:31+00:00</published><updated>2025-04-16T20:31:31+00:00</updated><id>https://rouvenjahnke.github.io/blog/2025/the-maphy-club-a-new-mathematical-journey-on-youtube</id><content type="html" xml:base="https://rouvenjahnke.github.io/blog/2025/the-maphy-club-a-new-mathematical-journey-on-youtube/"><![CDATA[<figure><img alt="" src="https://cdn-images-1.medium.com/max/750/1*Zptx7ZKKXB8wQAUvTCvw2Q.jpeg"/><figcaption>Pi, for which we have a new series</figcaption></figure> <p>As a mathematics enthusiast and digital notetaker, I’m excited to announce the launch of <a href="https://www.youtube.com/@MaPhy-Club">MaPhy-Club</a>, a new YouTube channel I’ve created together with Christian Pruvost and other collaborators. MaPhy-Club represents our commitment to sharing original research and insights in mathematics and physics with a focus on formal reasoning and mathematical clarity.</p> <h3>Our First Video: A New Series Representation for π</h3> <p>Our <a href="https://www.youtube.com/watch?v=TwUNSINtpmk">inaugural video explores</a> an elegant and intriguing series representation for π that might not be familiar to many mathematicians. The expression claims that:</p> <figure><img alt="" src="https://cdn-images-1.medium.com/max/874/1*afYI_kn9RE4XEqdnnveSPA.png"/><figcaption>$$\pi = \sum_{n=1}^{\infty} \frac{n2^{n+1}((n-1)!)²}{(2n)!}$$</figcaption></figure> <p>This fascinating formula connects π to an infinite series involving factorials and powers of 2. In our video, we walk through a complete proof of this representation, starting from a general infinite series for the arcsine function and culminating in this elegant expression.</p> <p>The proof involves several transformations, including a clever substitution of 1/√2 into the arcsine series, which leads to an expression for π/4 that can be manipulated into our final form.</p> <p>Rather than revealing all the mathematical details here, I encourage you to watch our <a href="https://www.youtube.com/watch?v=TwUNSINtpmk">full video</a> to appreciate the elegance of the proof and the mathematical insights it provides.</p> <h3>Obsidian: My Mathematical Companion</h3> <p>As I delve deeper into mathematical research for our YouTube channel, <a href="https://obsidian.md/">Obsidian</a> has become an invaluable tool for my workflow. Here’s how I use it:</p> <p>Obsidian’s support for LaTeX makes it perfect for writing and storing mathematical equations. I can easily document formulas like our π representation:</p> <pre>$$\pi = \sum_{n=1}^{\infty} \frac{n2^{n+1}((n-1)!)^2}{(2n)!}$$</pre> <p>The bidirectional linking in Obsidian allows me to connect related mathematical concepts. When exploring series representations, I can link to notes on convergence properties, specific constants, or historical discoveries about π.</p> <p>Using Obsidian’s graph view, I can visualize how different mathematical concepts interconnect, revealing patterns and relationships that might not be immediately obvious in linear notes.</p> <p>I track the development of proofs through multiple iterations, keeping a record of false starts and breakthroughs alike. This has been particularly valuable as we developed the proof shown in our first video.</p> <p><em>But looking forward for a deeper article about my Obsidian worklflow in mathematics at unviersity.</em></p> <h3>Also Looking Forward: MaPhy-Club’s Mission</h3> <p>MaPhy-Club is dedicated to presenting original work in mathematics and physics. Our content is designed for advanced students, early-stage researchers, and anyone interested in the foundations and frontiers of exact science.</p> <p>As described in our channel’s mission statement:</p> <blockquote><em>“MaPhy-Club is a research-focused YouTube channel dedicated to presenting original work in mathematics and physics. Our aim is to contribute to the scientific discourse by offering well-structured, conceptually rigorous content that reflects ongoing investigations and independent theoretical developments.”</em></blockquote> <p>In future videos, we’ll be exploring more original insights in both mathematics and physics, always with a commitment to rigor and clarity. Topics on our radar include advanced calculus concepts, theoretical physics applications, and more explorations of fundamental constants like our first video’s examination of π.</p> <h3>Join Our Journey</h3> <p>I invite you to <a href="https://www.youtube.com/@MaPhy-Club">subscribe to MaPhy-Club</a> and join us on this mathematical and physical exploration. Whether you’re a student, researcher, or simply curious about the beautiful world of exact sciences, our channel aims to provide content that challenges and inspires.</p> <p>And if you’re interested in how tools like Obsidian can enhance your own mathematical documentation and research, I’d be happy to share more specifics about my setup and workflow in future articles.</p> <p>Mathematics is a journey best taken together — I hope you’ll join us on ours.</p> <p><em>Rouven Jahnke is a mathematics enthusiast and co-creator of the MaPhy-Club YouTube channel. He uses Obsidian for documenting mathematical research and developing educational content.</em></p> <p><img src="https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=bd258bd41e02" width="1" height="1" alt=""/>&lt;hr&gt;&lt;p&gt;<a href="https://medium.com/pure-mathematics/the-maphy-club-a-new-mathematical-journey-on-youtube-bd258bd41e02">The MaPhy-Club: A New Mathematical Journey on YouTube</a> was originally published in <a href="https://medium.com/pure-mathematics">Pure Mathematics</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.&lt;/p&gt;</p>]]></content><author><name></name></author></entry><entry><title type="html">a post with plotly.js</title><link href="https://rouvenjahnke.github.io/blog/2025/plotly/" rel="alternate" type="text/html" title="a post with plotly.js"/><published>2025-03-26T14:24:00+00:00</published><updated>2025-03-26T14:24:00+00:00</updated><id>https://rouvenjahnke.github.io/blog/2025/plotly</id><content type="html" xml:base="https://rouvenjahnke.github.io/blog/2025/plotly/"><![CDATA[<p>This is an example post with some <a href="https://plotly.com/javascript/">plotly</a> code.</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">plotly
</span><span class="sb">{
  "data": [
    {
      "x": [1, 2, 3, 4],
      "y": [10, 15, 13, 17],
      "type": "scatter"
    },
    {
      "x": [1, 2, 3, 4],
      "y": [16, 5, 11, 9],
      "type": "scatter"
    }
  ]
}</span>
<span class="p">```</span>
</code></pre></div></div> <p>Which generates:</p> <pre><code class="language-plotly">{
  "data": [
    {
      "x": [1, 2, 3, 4],
      "y": [10, 15, 13, 17],
      "type": "scatter"
    },
    {
      "x": [1, 2, 3, 4],
      "y": [16, 5, 11, 9],
      "type": "scatter"
    }
  ]
}
</code></pre> <p>Also another example chart.</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">plotly
</span><span class="sb">{
  "data": [
    {
      "x": [1, 2, 3, 4],
      "y": [10, 15, 13, 17],
      "mode": "markers"
    },
    {
      "x": [2, 3, 4, 5],
      "y": [16, 5, 11, 9],
      "mode": "lines"
    },
    {
      "x": [1, 2, 3, 4],
      "y": [12, 9, 15, 12],
      "mode": "lines+markers"
    }
  ],
  "layout": {
    "title": {
      "text": "Line and Scatter Plot"
    }
  }
}</span>
<span class="p">```</span>
</code></pre></div></div> <p>This is how it looks like:</p> <pre><code class="language-plotly">{
  "data": [
    {
      "x": [1, 2, 3, 4],
      "y": [10, 15, 13, 17],
      "mode": "markers"
    },
    {
      "x": [2, 3, 4, 5],
      "y": [16, 5, 11, 9],
      "mode": "lines"
    },
    {
      "x": [1, 2, 3, 4],
      "y": [12, 9, 15, 12],
      "mode": "lines+markers"
    }
  ],
  "layout": {
    "title": {
      "text": "Line and Scatter Plot"
    }
  }
}
</code></pre>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="charts"/><summary type="html"><![CDATA[this is what included plotly.js code could look like]]></summary></entry><entry><title type="html">A Multi-Level Goal Planning System Using Obsidian</title><link href="https://rouvenjahnke.github.io/blog/2025/a-multi-level-goal-planning-system-using-obsidian/" rel="alternate" type="text/html" title="A Multi-Level Goal Planning System Using Obsidian"/><published>2025-01-25T16:06:32+00:00</published><updated>2025-01-25T16:06:32+00:00</updated><id>https://rouvenjahnke.github.io/blog/2025/a-multi-level-goal-planning-system-using-obsidian</id><content type="html" xml:base="https://rouvenjahnke.github.io/blog/2025/a-multi-level-goal-planning-system-using-obsidian/"><![CDATA[<h3>A Multi-Level Goal Planning System Using Obsidian with Advanced Features</h3> <p>Goal planning is a very good habit to track the progress of your work and reflect on past productivity, as well as plan time for the future.</p> <p>I am 17 years old, and in my class, there are no other people who plan and track their goals. But why is it like this?</p> <p>I think most people who do not plan goals and analyze their work don’t know about the big benefits of this time investment. But especially in my class, people haven’t even thought about it yet.</p> <p>This article is not going to be about the benefits of goal planning, but I wanted to mention these things to highlight the importance and to address the people who haven’t done it yet.</p> <p>Summa summarum, it is very important to reflect on this and optimize planning according to individual requirements. I use one of the most customizable tools for this purpose, which I use to plan my goals and much more: <strong><em>Obsidian</em></strong>!</p> <p><strong><em>This article requiere some advanced knowledge about Obsidian features. If you not hear about Obsidian yet, here is a very short introduction, such that you can think about, if you want to learn Obsidian (I recommend that!):</em></strong><em><br/></em><a href="https://obsidian.md/download">Obsidian</a> is a powerful and highly customizable note-taking and knowledge management app designed for people who want to structure and connect their ideas. It allows you to create, link, and organize plain-text Markdown files on your device as Markdwon-Files, offline-first system for building your personal knowledge base.</p> <p>One of Obsidian’s key features is the extensive <strong>plugin ecosystem</strong>, Obsidian can be tailored to meet a wide range of needs, from task and project management to goal planning and even habit tracking.</p> <p>Unlike other tools, Obsidian is built around the concept of <strong>linking notes</strong>, which helps you create a “second brain” where your ideas and goals grow organically. Whether you’re a student, researcher, or simply someone who loves staying organized, Obsidian provides the tools to take your productivity to the next level.</p> <p>You can download my full example-vault with all the templates and scripts, as well as the plugins <a href="https://github.com/rpj-07/goal-planning-vault">here</a>.</p> <p>For this workflow I use these plugins:</p> <p><em>mandatory:</em></p> <ul><li><a href="https://github.com/blacksmithgu/obsidian-dataview">Dataview</a></li><li><a href="https://github.com/mgmeyers/obsidian-kanban">Kanban</a></li><li><a href="https://github.com/chhoumann/quickadd">QuickAdd</a></li><li><a href="https://github.com/SilentVoid13/Templater">Templater</a></li><li><a href="https://github.com/shabegom/buttons">Buttons</a></li></ul> <p><em>optional:</em></p> <ul><li><a href="https://github.com/mark-when/markwhen">Markwhen</a></li><li>my own created script: <a href="https://github.com/rpj-07/Markwhen-File-Sync">Markwhen-File-Sync</a></li></ul> <p><em>The workflow I introduced for myself is inspired and particulary adapted from </em><a href="https://bagerbach.com/blog/projects-and-goals-obsidian"><em>Christian B. B. Houmann</em></a><em>, especially some scripts from him. He also writes about other things related to Obsidian, so it could be interesting to visit his website, I recommend that!</em></p> <p><strong>But let’s deep dive into my workflow:</strong></p> <p>My system is based on four levels:</p> <ol><li>Yearly Goals</li><li>Milestones</li><li>Projects</li><li>Tasks in the Projects</li></ol> <h3>Yearly goals</h3> <p>The yearly goals are goals for a year; this time horizon is, for me, the best, but you could also modify this to a longer time.</p> <p>This is my template for the yearly goals:</p> <pre>---<br />Created: &lt;% tp.date.now(&quot;YYYY-MM-DD&quot;) %&gt;<br />tags:<br />  - focus<br />  - yeargoal<br />title: &quot;&quot;<br />date: &quot;&quot;<br />endDate: &quot;&quot;<br />status: <br />Timespan: &quot;&quot;<br />---<br />```button<br />name Done<br />type command<br />action QuickAdd: set-done-with-date<br />```<br /><br /># <br /><br />Bar:: `$= dv.view(&#39;goal-average-progress-bar&#39;, {file: &#39;&#39;})`<br />TimeProgress:: `$= dv.view(&#39;time-progress-bar&#39;, {file: &#39;&lt;%tp.file.title%&gt;&#39;})`</pre> <p>So I have in the Frontmatter different properties. The properties date and endDate are the start and end dates of my yearly goal. Because I defined some yearly goals in the middle of one year, I also added the option to set this time not only within one year (e.g. instead of 01.01.2025–31.12.2025 this dates: 01.06.2025–01.06.2026).<br/>The status has these options:<br/>- not started<br/>-&gt; the meaning is clear I assume<br/>- in progress<br/>-&gt; I am currently working on, respectively I am working on projects from this goal, which are active currently<br/>- off progress<br/>-&gt; I am not on schedule or it is taking longer than planned.<br/>- done.</p> <p>The timespan I adapted from another workflow, but I think that is not so important.</p> <p>Now, Bar and TimeProgress are interesting. The first is the Inline Field for the progress bar of the tasks, or more specifically, the proportion of tasks that are completed.<br/>The TimeProgress is the progress of the time, so the proportion of how much time I have until the endDate.</p> <p>The script after this inline field uses the JavaScript files, which are saved in the folder “goal planning/views”.<br/>The <a href="https://github.com/shabegom/buttons">button</a> query is interesting because it is rendered as this:</p> <figure><img alt="" src="https://cdn-images-1.medium.com/max/519/1*NW7LvEfBeHLUYIEeLX2APg.png"/><figcaption>Screenshot of a example note as a yearly goal</figcaption></figure> <p>and with which I can set the status to “done” and add a new frontmatter: completedDate:</p> <figure><img alt="" src="https://cdn-images-1.medium.com/max/500/1*CdfD0LebbYbirWfBYvvyEA.png"/><figcaption>Screenshot of the completed yearly goal</figcaption></figure> <p>so that I see this on my yearly or quartely note, so I can track it.</p> <h3><strong>Milestones</strong></h3> <p>The milestones are particular goals, so the sub-goals of the yearly goals. This is my template:</p> <pre>---<br />Created: &lt;% tp.date.now(&quot;YYYY-MM-DD&quot;) %&gt;<br />tags:<br />  - focus<br />  - milestone<br />aliases:<br />  - &quot;&quot;<br />date: &quot;&quot;<br />endDate: &quot;&quot;<br />Type: &quot;&quot;<br />status: <br />Timespan: &quot;&quot;<br />---<br />```button<br />name Done<br />type command<br />action QuickAdd: set-done-with-date<br />```<br /><br /># &lt;%tp.file.title%&gt;<br /><br />%%<br />Progress:: `$= dv.view(&#39;progress&#39;, {file: &#39;M} &#39;})`<br />Target:: `$= dv.view(&#39;target&#39;, {file: &#39;M} &#39;})`<br />Bar:: `$= dv.view(&#39;total-progress-bar&#39;, {file: &#39;M} &#39;})`<br />Projects:: `$= const projects = dv.page(&#39;M} &#39;).file.inlinks.where(p =&gt; { const mp = dv.page(p.path); return mp.tags?.includes(&#39;project&#39;) &amp;&amp; mp.status === &#39;in Progress&#39;}); if (projects.length &gt; 0) { dv.header(4, projects.length &gt; 1 ? &quot;Projects&quot; : &quot;Project&quot;); dv.list(projects) }`<br />TimeProgress:: `$= dv.view(&#39;time-progress-bar&#39;, {file: &#39;M} &#39;})`<br />```js quickadd<br />// Quartal Multiple-Choice<br />const quarters = [&quot;Q1&quot;, &quot;Q2&quot;, &quot;Q3&quot;, &quot;Q4&quot;];<br />const getSelectedQuarters = async () =&gt; {<br />    const selected = [];<br />    <br />    const suggestQuarters = async () =&gt; {<br />        const remaining = quarters.filter(q =&gt; !selected.includes(q));<br />        if (remaining.length === 0) return false;<br />        <br />        // Füge Statusanzeige zur Auswahlliste hinzu<br />        const currentStatus = selected.length &gt; 0 ? <br />            `Bereits gewählt: ${selected.join(&quot;, &quot;)}` : <br />            &quot;Keine Auswahl getroffen&quot;;<br />            <br />        const choice = await this.quickAddApi.suggester(<br />            [...remaining, &quot;---&quot; + currentStatus + &quot;---&quot;, &quot;✓ Fertig&quot;],<br />            [...remaining, null, false]<br />        );<br />        <br />        if (choice === false || choice === null) return false;<br />        selected.push(choice);<br />        return true;<br />    };<br />    <br />    while (await suggestQuarters()) {}<br />    return selected;<br />};<br /><br />const selectedQuarters = await getSelectedQuarters();<br /><br />// Wenn keine Auswahl getroffen wurde<br />if (selectedQuarters.length === 0) {<br />    return &quot;Keine Quartale ausgewählt&quot;;<br />}<br /><br />// Formatiere die Ausgabe mit Templater-Syntax<br />const formattedQuarters = selectedQuarters.map(q =&gt; <br />    `[[&lt;%tp.date.now(&quot;YYYY&quot;)%&gt; ${q}]]`<br />).join(&quot;, &quot;);<br /><br />return `Quartal:: ${formattedQuarters}`;<br />```<br />```js quickadd<br />const yearlyGoalNotes = DataviewAPI.pages(&quot;#yeargoal&quot;).where(<br />    (p) =&gt; !p.file.path.includes(&quot;Template&quot;)<br />).values;<br /><br />const selectedYearlyGoal = await this.quickAddApi.suggester(<br />    yearlyGoalNotes.map((p) =&gt; p.file.name),<br />    yearlyGoalNotes<br />);<br /><br />// Überprüfen ob Alias existiert, sonst Dateiname verwenden<br />let alias = (selectedYearlyGoal.aliases &amp;&amp; selectedYearlyGoal.aliases.length &gt; 0) ? <br />    selectedYearlyGoal.aliases[0] : selectedYearlyGoal.file.name;<br /><br />console.log(&quot;Ausgewähltes Jahresziel:&quot;, selectedYearlyGoal);<br />console.log(&quot;Alias:&quot;, alias);<br /><br />const yearlyGoalFile = app.vault.getAbstractFileByPath(selectedYearlyGoal.file.path);<br />let markdownLink = this.app.fileManager.generateMarkdownLink(<br />    yearlyGoalFile,<br />    &quot;&quot;<br />);<br />markdownLink = `${markdownLink.slice(0, markdownLink.length - 2)}|${alias}${markdownLink.slice(markdownLink.length - 2)}`;<br />return `YearlyGoal:: ${markdownLink}`;<br />```<br />%%<br /><br />## What does success look like? What are the key results?<br /><br />- <br /><br />## Related core values<br /><br />- <br /><br />## Projects to make this happen<br /><br />### Ideas<br /><br />-<br /><br />### Created projects<br /><br />```dataviewjs<br />const pages = dv.current().file.inlinks.where(p =&gt; dv.page(p.path).tags?.includes(&#39;project&#39;));<br /><br />dv.table([&quot;Project&quot;, &quot;Status&quot;, &quot;Completed&quot;, &quot;Tasks&quot;], pages.map(p =&gt; {<br /> const page = dv.page(p.path);<br /> const tasks = page.file.tasks;<br /> return [<br />  page.file.link,<br />  page.status,<br />  tasks.where(t =&gt; t.fullyCompleted === true).length,<br />  tasks.length<br /> ]<br />}));<br />```</pre> <p>So here are partly the same properties, but also new scripts:</p> <ul><li><strong>Progress</strong> is the number of all tasks that are completed in the project notes, which are linked to this milestone (see the next section).</li><li><strong>Target</strong> is the number of all tasks in the project notes that are linked to this milestone.</li><li><strong>Bar</strong> is then the visualized progress of the tasks from all projects.</li></ul> <p>Then there are also the Quartal and YearlyGoal inline fields. The first one is a link to the quarter(s) in which I am going to work on this milestone.<br/>The YearlyGoal is a link to the yearly goal from this milestone.</p> <p>Then there are different sections in which I write down some information about this milestone, and in the end, there is a Dataview query that shows all the projects that are linked to this milestone.</p> <p>This is an example:</p> <figure><img alt="" src="https://cdn-images-1.medium.com/max/711/1*eeYX7F8Aa5QJPTV04HpW9Q.png"/></figure> <h3>Projects</h3> <p>So the lowest level of notes in my goal planning is the project notes. In these notes, I break down the milestones into projects (on which I work on for a few weeks):</p> <pre>---<br />Created: &lt;% tp.date.now(&quot;YYYY-MM-DD&quot;) %&gt;<br />tags:<br />  - focus<br />  - project<br />title: &quot;&quot;<br />date: &quot;&quot;<br />endDate: &quot;&quot;<br />status: not started<br />subtitle: &quot;&quot;<br />next-step:<br />---<br />```button<br />name Done<br />type command&gt;action QuickAdd: set-done-with-date<br />```<br /><br /><br />%%<br />```js quickadd<br />const goalNotes = DataviewAPI.pages(&quot;#milestone&quot;).where(<br />    (p) =&gt; !p.file.path.includes(&quot;Template&quot;)<br />).values;<br /><br />const targetGoal = await this.quickAddApi.suggester(<br />    goalNotes.map((p) =&gt; p.file.name),<br />    goalNotes<br />);<br /><br />// Überprüfen, ob eine `aliases`-Liste existiert und wähle den ersten Eintrag; falls nicht, verwende den Dateinamen<br />let alias = (targetGoal.aliases &amp;&amp; targetGoal.aliases.length &gt; 0) ? targetGoal.aliases[0] : targetGoal.file.name;<br />console.log(&quot;Gewähltes Ziel:&quot;, targetGoal); // Debugging: Zeigt `targetGoal` an<br />console.log(&quot;Alias:&quot;, alias); // Debugging: Zeigt den Alias oder den Fallback an<br /><br />const targetGoalFile = app.vault.getAbstractFileByPath(targetGoal.file.path);<br />let markdownLink = this.app.fileManager.generateMarkdownLink(<br />    targetGoalFile,<br />    &quot;&quot;<br />);<br />markdownLink = `${markdownLink.slice(0, markdownLink.length - 2)}|${alias}${markdownLink.slice(markdownLink.length - 2)}`;<br />return `Milestone:: ${markdownLink}`;<br />```<br />```js quickadd<br />const shouldProjectTrackProgress = await this.quickAddApi.yesNoPrompt(`Should this project track progress via markdown tasks?`, &#39;Enabling this will give the project note a Bar property, similarly to auto-tracked goals. The tasks are auto-tracked, so each time you check one off, you make progress.&#39;);<br />if (shouldProjectTrackProgress) return &quot;Bar:: `$= dv.view(&#39;total-progress-bar&#39;, {file: &#39;P} &#39;})`&quot;;<br />```<br />Quartal:: [[&lt;%tp.date.now(&quot;YYYY&quot;)%&gt; ]]<br />%%<br /><br /># <br />## Project Info<br /><br /><br /><br /><br />### Tasks<br />#todo/focus<br />- [ ] <br /><br /><br /><br /><br />---<br />## Thoughts<br /><br /><br />## Review<br /><br />### Reflection</pre> <p>Here are basically the same inline fields. The link to the Milestone and the Quartal follow the same logic as on one higher level, but the Bar is a little bit different. <br/>So the bar is the progress of the tasks only in this Project Note. Lower in this note is the section for the Tasks.</p> <p>There you can create tasks for this project, which you can mark as complete, and based on these, you see the progress of the project. When you have created the yearly goals, milestones, and projects, then you can start working on the projects and keep track the progress and, if you have to, change the dates or add tasks.</p> <p>To organize them, you can use the Project Board in the example vault. When you create the projects, QuickAdd automatically adds a new card to this Kanban:</p> <figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*tc6uE9xajN_jqKkkxuti3A.png"/></figure> <p>When you move this card to one of the other fields, the property `status` will automatically change too (for that, I use the <a href="https://github.com/chhoumann/MetaEdit">MetaEdit plugin</a>).</p> <p>I have a dashboard too for that (this is an example from my vault, which is why it is in german):</p> <figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*z_R28YUZxAFQ7BDuPLqpkA.png"/></figure> <h3>Timeline for this goals</h3> <p>A very good option to visualize the projects and milestones is a timeline. Unfortunately, there is no plugin to do that directly.</p> <p>So I have a workaround with the <a href="https://github.com/mark-when/obsidian-plugin">Markwhen plugin</a>.</p> <p>Here is an example of the visualization:</p> <figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*GsGdi-9O7EAfG0FmmdXpmA.png"/><figcaption>Screenshot: Visualisation of the goals</figcaption></figure> <p>So there you can also move the events and modify the start or end date.</p> <p>This timeline is based on this Markwhen note:</p> <pre>group 1. Sehr gutes Zeugnis Q1<br />2025-01-07/2025-07-14: [[M} 1.2 Sehr gute Unterrichtsbeiträge]] #in-progress<br />2025-01-08/2025-07-15: [[M} 1.3 Sehr gute Nacharbeit, sowie Organisation und Obsidian-Workflow (Lernplan, präv. Lernkarten)]] #in-progress<br />2025-03-01/2025-07-01: [[M} 1.1 Sehr gute Klausurvorbereitung]] #not-started<br />end group<br /><br /><br />group 2. Sehr gute Leistung im Juniorstudium<br />2024-10-20/2025-03-03: [[M} 2.1 Sehr gut in Algebra]] #in-progress<br />2025-02-03/2025-08-18: [[M} 2.3 Veröffentlichung der ersten Paper]]<br />2025-05-07/2025-11-01: [[M} 2.2 Vernetzung mit Professoren und Mitstudenten]]<br />end group<br /><br /><br />group 3. Annahme in Oxbridge<br />2025-01-01/2025-11-16: [[M} 3.3 Sonderleistung und Verbesserungen der Aufnahmewahrscheinlichkeit (extracurriculare Aktivitäten)]] #in-progress<br />2025-05-01/2026-01-26: [[M} 3.1 Sehr gutes Englisch]]<br />2025-06-01/2025-12-13: [[M} 3.2 Vorbereitung Interviews und MAT, sowie Bewerbungsstrategie]]<br />2025-06-01/2026-01-30: [[M} 3.4 Entry Admission (Applying-Process)]]<br />end group<br /><br /><br />group 4. Wissensschatzerweiterung<br />2024-11-25/2025-11-01: [[M} X Persönlichkeitsentwicklung und Erweiterung Kompetenz und Wissen]] #in-progress<br />end group</pre> <p>Therefore, I’ve created a <a href="https://github.com/rpj-07/Markwhen-File-Sync">plugin </a>which synchronizes the information in the milestone notes to this note (and in the right format), but also synchronizes the modifications from this note to the individual milestone notes.</p> <p>Additionally, not only are the dates synced, but the milestones are also grouped based on the yearly goals, and the status is added as a tag, allowing you to see the in-progress milestones in a different color than the not-started milestones. You can also see the groups in the visualized timeline (see above the picture). Probably, I’ll publish another article about these functionalities when I release my Markwhen-Sync-Plugin.<br/><em>The synchronization is not automatic yet; you have to click a button.</em></p> <p>The same visualization exists also for the projects.</p> <p>Like I said: You can <a href="https://github.com/rpj-07/goal-planning-vault">download all my scripts</a> and also this plugin from GitHub, but I am going to create a more customizable plugin for any synchronization between Markwhen notes and other notes based on the properties soon (<a href="https://github.com/rpj-07/Markwhen-File-Sync">here is a link</a>).</p> <p>I have integrated this goal planning also into my periodic notes / recurring reflections. If you are interested, I am going to write an article about that!</p> <p>Thank you for reading, I hope you can learn some new things! If you have questions, please write a comment or contact me via email in my profile!</p> <p>This is my first article for Medium. I plan to write some other articles about Obsidian, but also about science stuff.</p> <p><em>Additionally, I am not a native English speaker, so I hope I didn’t make too many mistakes, even though I had it corrected.</em></p> <p><img src="https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=29b94acd22f8" width="1" height="1" alt=""/>&lt;hr&gt;&lt;p&gt;<a href="https://medium.com/obsidian-observer/a-multi-level-goal-planning-system-using-obsidian-29b94acd22f8">A Multi-Level Goal Planning System Using Obsidian</a> was originally published in <a href="https://medium.com/obsidian-observer">Obsidian Observer</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.&lt;/p&gt;</p>]]></content><author><name></name></author></entry><entry><title type="html">a post with image galleries</title><link href="https://rouvenjahnke.github.io/blog/2024/photo-gallery/" rel="alternate" type="text/html" title="a post with image galleries"/><published>2024-12-04T01:59:00+00:00</published><updated>2024-12-04T01:59:00+00:00</updated><id>https://rouvenjahnke.github.io/blog/2024/photo-gallery</id><content type="html" xml:base="https://rouvenjahnke.github.io/blog/2024/photo-gallery/"><![CDATA[<p>The images in this post are all zoomable, arranged into different mini-galleries using different libraries.</p> <h2 id="lightbox2"><a href="https://lokeshdhakar.com/projects/lightbox2/">Lightbox2</a></h2> <p><a href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/1/img-2500.jpg" data-lightbox="roadtrip"><img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/1/img-200.jpg"/></a> <a href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/2/img-2500.jpg" data-lightbox="roadtrip"><img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/2/img-200.jpg"/></a> <a href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/3/img-2500.jpg" data-lightbox="roadtrip"><img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/3/img-200.jpg"/></a></p> <hr/> <h2 id="photoswipe"><a href="https://photoswipe.com/">PhotoSwipe</a></h2> <div class="pswp-gallery pswp-gallery--single-column" id="gallery--getting-started"> <a href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/2/img-2500.jpg" data-pswp-width="1669" data-pswp-height="2500" target="_blank"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/2/img-200.jpg" alt=""/> </a> <a href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/7/img-2500.jpg" data-pswp-width="1875" data-pswp-height="2500" data-cropped="true" target="_blank"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/7/img-200.jpg" alt=""/> </a> <a href="https://unsplash.com" data-pswp-src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/3/img-2500.jpg" data-pswp-width="2500" data-pswp-height="1666" target="_blank"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/3/img-200.jpg" alt=""/> </a> <div> <a href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/6/img-2500.jpg" data-pswp-width="2500" data-pswp-height="1667" target="_blank"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/6/img-200.jpg" alt=""/> </a> </div> </div> <hr/> <h2 id="spotlight-js"><a href="https://nextapps-de.github.io/spotlight/">Spotlight JS</a></h2> <div class="spotlight-group"> <a class="spotlight" href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/1/img-2500.jpg"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/1/img-200.jpg"/> </a> <a class="spotlight" href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/2/img-2500.jpg"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/2/img-200.jpg"/> </a> <a class="spotlight" href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/3/img-2500.jpg"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/3/img-200.jpg"/> </a> </div> <div class="spotlight-group"> <a class="spotlight" href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/4/img-2500.jpg"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/4/img-200.jpg"/> </a> <a class="spotlight" href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/5/img-2500.jpg"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/5/img-200.jpg"/> </a> <a class="spotlight" href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/6/img-2500.jpg"> <img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/6/img-200.jpg"/> </a> </div> <hr/> <h2 id="venobox"><a href="https://veno.es/venobox/">Venobox</a></h2> <p><a class="venobox" data-gall="myGallery" href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/1/img-2500.jpg"><img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/1/img-200.jpg"/></a> <a class="venobox" data-gall="myGallery" href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/2/img-2500.jpg"><img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/2/img-200.jpg"/></a> <a class="venobox" data-gall="myGallery" href="https://cdn.photoswipe.com/photoswipe-demo-images/photos/3/img-2500.jpg"><img src="https://cdn.photoswipe.com/photoswipe-demo-images/photos/3/img-200.jpg"/></a></p>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="images"/><summary type="html"><![CDATA[this is what included image galleries could look like]]></summary></entry><entry><title type="html">Google Gemini updates: Flash 1.5, Gemma 2 and Project Astra</title><link href="https://rouvenjahnke.github.io/blog/2024/google-gemini-updates-flash-15-gemma-2-and-project-astra/" rel="alternate" type="text/html" title="Google Gemini updates: Flash 1.5, Gemma 2 and Project Astra"/><published>2024-05-14T00:00:00+00:00</published><updated>2024-05-14T00:00:00+00:00</updated><id>https://rouvenjahnke.github.io/blog/2024/google-gemini-updates-flash-15-gemma-2-and-project-astra</id><content type="html" xml:base="https://rouvenjahnke.github.io/blog/2024/google-gemini-updates-flash-15-gemma-2-and-project-astra/"><![CDATA[<p>May 14, 2024[[read-time]] min read We’re introducing a series of updates across the Gemini family of models, including the new 1.5 Flash, our lightweight model for speed and efficiency, and Project Astra, our vision for the future of AI assistants. In December, we launched our first natively multimodal model Gemini 1.0 in three sizes: Ultra, Pro and Nano. Just a few months later we released 1.5 Pro, with enhanced performance and a breakthrough long context window of 1 million tokens.Developers and enterprise customers have been putting 1.5 Pro to use in incredible ways and finding its long context window, multimodal reasoning capabilities and impressive overall performance incredibly useful.We know from user feedback that some applications need lower latency and a lower cost to serve. This inspired us to keep innovating, so today, we’re introducing Gemini 1.5 Flash: a model that’s lighter-weight than 1.5 Pro, and designed to be fast and efficient to serve at scale.Both 1.5 Pro and 1.5 Flash are available in public preview with a 1 million token context window in Google AI Studio and Vertex AI. And now, 1.5 Pro is also available with a 2 million token context window via waitlist to developers using the API and to Google Cloud customers.We’re also introducing updates across the Gemini family of models, announcing our next generation of open models, Gemma 2, and sharing progress on the future of AI assistants, with Project Astra.Context lengths of leading foundation models compared with Gemini 1.5’s 2 million token capability1.5 Flash is the newest addition to the Gemini model family and the fastest Gemini model served in the API. It’s optimized for high-volume, high-frequency tasks at scale, is more cost-efficient to serve and features our breakthrough long context window.While it’s a lighter weight model than 1.5 Pro, it’s highly capable of multimodal reasoning across vast amounts of information and delivers impressive quality for its size.The new Gemini 1.5 Flash model is optimized for speed and efficiency, is highly capable of multimodal reasoning and features our breakthrough long context window.1.5 Flash excels at summarization, chat applications, image and video captioning, data extraction from long documents and tables, and more. This is because it’s been trained by 1.5 Pro through a process called “distillation,” where the most essential knowledge and skills from a larger model are transferred to a smaller, more efficient model.Read more about 1.5 Flash in our updated Gemini 1.5 technical report, on the Gemini technology page, and learn about 1.5 Flash’s availability and pricing.Over the last few months, we’ve significantly improved 1.5 Pro, our best model for general performance across a wide range of tasks.Beyond extending its context window to 2 million tokens, we’ve enhanced its code generation, logical reasoning and planning, multi-turn conversation, and audio and image understanding through data and algorithmic advances. We see strong improvements on public and internal benchmarks for each of these tasks.1.5 Pro can now follow increasingly complex and nuanced instructions, including ones that specify product-level behavior involving role, format and style. We’ve improved control over the model’s responses for specific use cases, like crafting the persona and response style of a chat agent or automating workflows through multiple function calls. And we’ve enabled users to steer model behavior by setting system instructions.We added audio understanding in the Gemini API and Google AI Studio, so 1.5 Pro can now reason across image and audio for videos uploaded in Google AI Studio. And we’re now integrating 1.5 Pro into Google products, including Gemini Advanced and in Workspace apps.Read more about 1.5 Pro in our updated Gemini 1.5 technical report and on the Gemini technology page.Gemini Nano is expanding beyond text-only inputs to include images as well. Starting with Pixel, applications using Gemini Nano with Multimodality will be able to understand the world the way people do — not just through text, but also through sight, sound and spoken language.Read more about Gemini 1.0 Nano on Android.Today, we’re also sharing a series of updates to Gemma, our family of open models built from the same research and technology used to create the Gemini models.We’re announcing Gemma 2, our next generation of open models for responsible AI innovation. Gemma 2 has a new architecture designed for breakthrough performance and efficiency, and will be available in new sizes.The Gemma family is also expanding with PaliGemma, our first vision-language model inspired by PaLI-3. And we’ve upgraded our Responsible Generative AI Toolkit with LLM Comparator for evaluating the quality of model responses.Read more on the Developer blog.As part of Google DeepMind’s mission to build AI responsibly to benefit humanity, we’ve always wanted to develop universal AI agents that can be helpful in everyday life. That’s why today, we’re sharing our progress in building the future of AI assistants with Project Astra (advanced seeing and talking responsive agent).To be truly useful, an agent needs to understand and respond to the complex and dynamic world just like people do — and take in and remember what it sees and hears to understand context and take action. It also needs to be proactive, teachable and personal, so users can talk to it naturally and without lag or delay.While we’ve made incredible progress developing AI systems that can understand multimodal information, getting response time down to something conversational is a difficult engineering challenge. Over the past few years, we’ve been working to improve how our models perceive, reason and converse to make the pace and quality of interaction feel more natural.Building on Gemini, we’ve developed prototype agents that can process information faster by continuously encoding video frames, combining the video and speech input into a timeline of events, and caching this information for efficient recall.By leveraging our leading speech models, we also enhanced how they sound, giving the agents a wider range of intonations. These agents can better understand the context they’re being used in, and respond quickly, in conversation.With technology like this, it’s easy to envision a future where people could have an expert AI assistant by their side, through a phone or glasses. And some of these capabilities are coming to Google products, like the Gemini app and web experience, later this year.We’ve made incredible progress so far with our family of Gemini models, and we’re always striving to advance the state-of-the-art even further. By investing in a relentless production line of innovation, we’re able to explore new ideas at the frontier, while also unlocking the possibility of new and exciting Gemini use cases.Learn more about Gemini and its capabilities. Your information will be used in accordance with Google’s privacy policy.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>      Done. Just one step more.
    
      Check your inbox to confirm your subscription.
    You are already subscribed to our newsletter.
    You can also subscribe with a
    different email address
    
    .
    
  Let’s stay in touch. Get the latest news from Google in your inbox.
          Follow Us
</code></pre></div></div>]]></content><author><name></name></author><summary type="html"><![CDATA[We’re sharing updates across our Gemini family of models and a glimpse of Project Astra, our vision for the future of AI assistants.]]></summary></entry><entry><title type="html">a post with tabs</title><link href="https://rouvenjahnke.github.io/blog/2024/tabs/" rel="alternate" type="text/html" title="a post with tabs"/><published>2024-05-01T00:32:13+00:00</published><updated>2024-05-01T00:32:13+00:00</updated><id>https://rouvenjahnke.github.io/blog/2024/tabs</id><content type="html" xml:base="https://rouvenjahnke.github.io/blog/2024/tabs/"><![CDATA[<p>This is how a post with <a href="https://github.com/Ovski4/jekyll-tabs">tabs</a> looks like. Note that the tabs could be used for different purposes, not only for code.</p> <h2 id="first-tabs">First tabs</h2> <p>To add tabs, use the following syntax:</p> <div class="language-liquid highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">{%</span><span class="w"> </span><span class="nt">tabs</span><span class="w"> </span><span class="nv">group-name</span><span class="w"> </span><span class="cp">%}</span>

<span class="cp">{%</span><span class="w"> </span><span class="nt">tab</span><span class="w"> </span><span class="nv">group-name</span><span class="w"> </span><span class="nv">tab-name-1</span><span class="w"> </span><span class="cp">%}</span>

Content 1

<span class="cp">{%</span><span class="w"> </span><span class="nt">endtab</span><span class="w"> </span><span class="cp">%}</span>

<span class="cp">{%</span><span class="w"> </span><span class="nt">tab</span><span class="w"> </span><span class="nv">group-name</span><span class="w"> </span><span class="nv">tab-name-2</span><span class="w"> </span><span class="cp">%}</span>

Content 2

<span class="cp">{%</span><span class="w"> </span><span class="nt">endtab</span><span class="w"> </span><span class="cp">%}</span>

<span class="cp">{%</span><span class="w"> </span><span class="nt">endtabs</span><span class="w"> </span><span class="cp">%}</span>
</code></pre></div></div> <p>With this you can generate visualizations like:</p> <ul id="log" class="tab" data-tab="2823f70c-9b04-48a2-8b1f-57b832def0fe" data-name="log"> <li class="active" id="log-php"> <a href="#">php </a> </li> <li id="log-js"> <a href="#">js </a> </li> <li id="log-ruby"> <a href="#">ruby </a> </li> </ul> <ul class="tab-content" id="2823f70c-9b04-48a2-8b1f-57b832def0fe" data-name="log"> <li class="active"> <div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">var_dump</span><span class="p">(</span><span class="s1">'hello'</span><span class="p">);</span>
</code></pre></div></div> </li> <li> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">hello</span><span class="dl">"</span><span class="p">);</span>
</code></pre></div></div> </li> <li> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">pputs</span> <span class="dl">'</span><span class="s1">hello</span><span class="dl">'</span>
</code></pre></div></div> </li> </ul> <h2 id="another-example">Another example</h2> <ul id="data-struct" class="tab" data-tab="b9463206-3c77-4be9-8773-50492884d9f0" data-name="data-struct"> <li class="active" id="data-struct-yaml"> <a href="#">yaml </a> </li> <li id="data-struct-json"> <a href="#">json </a> </li> </ul> <ul class="tab-content" id="b9463206-3c77-4be9-8773-50492884d9f0" data-name="data-struct"> <li class="active"> <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">hello</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="s2">"</span><span class="s">whatsup"</span>
  <span class="pi">-</span> <span class="s2">"</span><span class="s">hi"</span>
</code></pre></div></div> </li> <li> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"hello"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">"whatsup"</span><span class="p">,</span><span class="w"> </span><span class="s2">"hi"</span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> </li> </ul> <h2 id="tabs-for-something-else">Tabs for something else</h2> <ul id="something-else" class="tab" data-tab="85cacde6-ed38-4c85-a085-5aebe9273413" data-name="something-else"> <li class="active" id="something-else-text"> <a href="#">text </a> </li> <li id="something-else-quote"> <a href="#">quote </a> </li> <li id="something-else-list"> <a href="#">list </a> </li> </ul> <ul class="tab-content" id="85cacde6-ed38-4c85-a085-5aebe9273413" data-name="something-else"> <li class="active"> <p>Regular text</p> </li> <li> <blockquote> <p>A quote</p> </blockquote> </li> <li> <p>Hipster list</p> <ul> <li>brunch</li> <li>fixie</li> <li>raybans</li> <li>messenger bag</li> </ul> </li> </ul>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="code"/><summary type="html"><![CDATA[this is what included tabs in a post could look like]]></summary></entry><entry><title type="html">a post with typograms</title><link href="https://rouvenjahnke.github.io/blog/2024/typograms/" rel="alternate" type="text/html" title="a post with typograms"/><published>2024-04-29T23:36:10+00:00</published><updated>2024-04-29T23:36:10+00:00</updated><id>https://rouvenjahnke.github.io/blog/2024/typograms</id><content type="html" xml:base="https://rouvenjahnke.github.io/blog/2024/typograms/"><![CDATA[<p>This is an example post with some <a href="https://github.com/google/typograms/">typograms</a> code.</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">typograms
</span><span class="sb">+----+
|    |---&gt; My first diagram!
+----+</span>
<span class="p">```</span>
</code></pre></div></div> <p>Which generates:</p> <pre><code class="language-typograms">+----+
|    |---&gt; My first diagram!
+----+
</code></pre> <p>Another example:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">typograms
</span><span class="sb">.------------------------.
|.----------------------.|
||"https://example.com" ||
|'----------------------'|
| ______________________ |
||                      ||
||   Welcome!           ||
||                      ||
||                      ||
||  .----------------.  ||
||  | username       |  ||
||  '----------------'  ||
||  .----------------.  ||
||  |"*******"       |  ||
||  '----------------'  ||
||                      ||
||  .----------------.  ||
||  |   "Sign-up"    |  ||
||  '----------------'  ||
||                      ||
|+----------------------+|
.------------------------.</span>
<span class="p">```</span>
</code></pre></div></div> <p>which generates:</p> <pre><code class="language-typograms">.------------------------.
|.----------------------.|
||"https://example.com" ||
|'----------------------'|
| ______________________ |
||                      ||
||   Welcome!           ||
||                      ||
||                      ||
||  .----------------.  ||
||  | username       |  ||
||  '----------------'  ||
||  .----------------.  ||
||  |"*******"       |  ||
||  '----------------'  ||
||                      ||
||  .----------------.  ||
||  |   "Sign-up"    |  ||
||  '----------------'  ||
||                      ||
|+----------------------+|
.------------------------.
</code></pre> <p>For more examples, check out the <a href="https://google.github.io/typograms/#examples">typograms documentation</a>.</p>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="diagrams"/><summary type="html"><![CDATA[this is what included typograms code could look like]]></summary></entry><entry><title type="html">a post that can be cited</title><link href="https://rouvenjahnke.github.io/blog/2024/post-citation/" rel="alternate" type="text/html" title="a post that can be cited"/><published>2024-04-28T15:06:00+00:00</published><updated>2024-04-28T15:06:00+00:00</updated><id>https://rouvenjahnke.github.io/blog/2024/post-citation</id><content type="html" xml:base="https://rouvenjahnke.github.io/blog/2024/post-citation/"><![CDATA[<p>This is an example post that can be cited. The content of the post ends here, while the citation information is automatically provided below. The only thing needed is for you to set the <code class="language-plaintext highlighter-rouge">citation</code> key in the front matter to <code class="language-plaintext highlighter-rouge">true</code>.</p>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="citation"/><summary type="html"><![CDATA[this is what a post that can be cited looks like]]></summary></entry><entry><title type="html">a post with pseudo code</title><link href="https://rouvenjahnke.github.io/blog/2024/pseudocode/" rel="alternate" type="text/html" title="a post with pseudo code"/><published>2024-04-15T00:01:00+00:00</published><updated>2024-04-15T00:01:00+00:00</updated><id>https://rouvenjahnke.github.io/blog/2024/pseudocode</id><content type="html" xml:base="https://rouvenjahnke.github.io/blog/2024/pseudocode/"><![CDATA[<p>This is an example post with some pseudo code rendered by <a href="https://github.com/SaswatPadhi/pseudocode.js">pseudocode</a>. The example presented here is the same as the one in the <a href="https://saswat.padhi.me/pseudocode.js/">pseudocode.js</a> documentation, with only one simple but important change: everytime you would use <code class="language-plaintext highlighter-rouge">$</code>, you should use <code class="language-plaintext highlighter-rouge">$$</code> instead. Also, note that the <code class="language-plaintext highlighter-rouge">pseudocode</code> key in the front matter is set to <code class="language-plaintext highlighter-rouge">true</code> to enable the rendering of pseudo code. As an example, using this code:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">pseudocode
</span><span class="sb">% This quicksort algorithm is extracted from Chapter 7, Introduction to Algorithms (3rd edition)
\begin{algorithm}
\caption{Quicksort}
\begin{algorithmic}
\PROCEDURE{Quicksort}{$$A, p, r$$}
    \IF{$$p &lt; r$$}
        \STATE $$q = $$ \CALL{Partition}{$$A, p, r$$}
        \STATE \CALL{Quicksort}{$$A, p, q - 1$$}
        \STATE \CALL{Quicksort}{$$A, q + 1, r$$}
    \ENDIF
\ENDPROCEDURE
\PROCEDURE{Partition}{$$A, p, r$$}
    \STATE $$x = A[r]$$
    \STATE $$i = p - 1$$
    \FOR{$$j = p$$ \TO $$r - 1$$}
        \IF{$$A[j] &lt; x$$}
            \STATE $$i = i + 1$$
            \STATE exchange
            $$A[i]$$ with $$A[j]$$
        \ENDIF
        \STATE exchange $$A[i]$$ with $$A[r]$$
    \ENDFOR
\ENDPROCEDURE
\end{algorithmic}
\end{algorithm}</span>
<span class="p">```</span>
</code></pre></div></div> <p>Generates:</p> <pre><code class="language-pseudocode">% This quicksort algorithm is extracted from Chapter 7, Introduction to Algorithms (3rd edition)
\begin{algorithm}
\caption{Quicksort}
\begin{algorithmic}
\PROCEDURE{Quicksort}{$$A, p, r$$}
    \IF{$$p &lt; r$$}
        \STATE $$q = $$ \CALL{Partition}{$$A, p, r$$}
        \STATE \CALL{Quicksort}{$$A, p, q - 1$$}
        \STATE \CALL{Quicksort}{$$A, q + 1, r$$}
    \ENDIF
\ENDPROCEDURE
\PROCEDURE{Partition}{$$A, p, r$$}
    \STATE $$x = A[r]$$
    \STATE $$i = p - 1$$
    \FOR{$$j = p$$ \TO $$r - 1$$}
        \IF{$$A[j] &lt; x$$}
            \STATE $$i = i + 1$$
            \STATE exchange
            $$A[i]$$ with $$A[j]$$
        \ENDIF
        \STATE exchange $$A[i]$$ with $$A[r]$$
    \ENDFOR
\ENDPROCEDURE
\end{algorithmic}
\end{algorithm}
</code></pre>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="code"/><summary type="html"><![CDATA[this is what included pseudo code could look like]]></summary></entry><entry><title type="html">a post with code diff</title><link href="https://rouvenjahnke.github.io/blog/2024/code-diff/" rel="alternate" type="text/html" title="a post with code diff"/><published>2024-01-27T19:22:00+00:00</published><updated>2024-01-27T19:22:00+00:00</updated><id>https://rouvenjahnke.github.io/blog/2024/code-diff</id><content type="html" xml:base="https://rouvenjahnke.github.io/blog/2024/code-diff/"><![CDATA[<p>You can display diff code by using the regular markdown syntax:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">diff
</span><span class="gh">diff --git a/sample.js b/sample.js
index 0000001..0ddf2ba
</span><span class="gd">--- a/sample.js
</span><span class="gi">+++ b/sample.js
</span><span class="p">@@ -1 +1 @@</span>
<span class="gd">-console.log("Hello World!")
</span><span class="gi">+console.log("Hello from Diff2Html!")</span>
<span class="p">```</span>
</code></pre></div></div> <p>Which generates:</p> <div class="language-diff highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gh">diff --git a/sample.js b/sample.js
index 0000001..0ddf2ba
</span><span class="gd">--- a/sample.js
</span><span class="gi">+++ b/sample.js
</span><span class="p">@@ -1 +1 @@</span>
<span class="gd">-console.log("Hello World!")
</span><span class="gi">+console.log("Hello from Diff2Html!")
</span></code></pre></div></div> <p>But this is difficult to read, specially if you have a large diff. You can use <a href="https://diff2html.xyz/">diff2html</a> to display a more readable version of the diff. For this, just use <code class="language-plaintext highlighter-rouge">diff2html</code> instead of <code class="language-plaintext highlighter-rouge">diff</code> for the code block language:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">diff2html
</span><span class="sb">diff --git a/sample.js b/sample.js
index 0000001..0ddf2ba
--- a/sample.js
+++ b/sample.js
@@ -1 +1 @@
-console.log("Hello World!")
+console.log("Hello from Diff2Html!")</span>
<span class="p">```</span>
</code></pre></div></div> <p>If we use a longer example, for example <a href="https://github.com/rtfpessoa/diff2html/commit/c2c253d3e3f8b8b267f551e659f72b44ca2ac927">this commit from diff2html</a>, it will generate the following output:</p> <pre><code class="language-diff2html">From 2aaae31cc2a37bfff83430c2c914b140bee59b6a Mon Sep 17 00:00:00 2001
From: Rodrigo Fernandes &lt;rtfrodrigo@gmail.com&gt;
Date: Sun, 9 Oct 2016 16:41:54 +0100
Subject: [PATCH 1/2] Initial template override support

---
 scripts/hulk.js                    |  4 ++--
 src/diff2html.js                   |  3 +--
 src/file-list-printer.js           | 11 ++++++++---
 src/hoganjs-utils.js               | 29 +++++++++++++++++------------
 src/html-printer.js                |  6 ++++++
 src/line-by-line-printer.js        |  6 +++++-
 src/side-by-side-printer.js        |  6 +++++-
 test/file-list-printer-tests.js    |  2 +-
 test/hogan-cache-tests.js          | 18 +++++++++++++++---
 test/line-by-line-tests.js         |  3 +--
 test/side-by-side-printer-tests.js |  3 +--
 11 files changed, 62 insertions(+), 29 deletions(-)

diff --git a/scripts/hulk.js b/scripts/hulk.js
index 5a793c18..a4b1a4d5 100755
--- a/scripts/hulk.js
+++ b/scripts/hulk.js
@@ -173,11 +173,11 @@ function namespace(name) {
 // write a template foreach file that matches template extension
 templates = extractFiles(options.argv.remain)
   .map(function(file) {
-    var openedFile = fs.readFileSync(file, 'utf-8');
+    var openedFile = fs.readFileSync(file, 'utf-8').trim();
     var name;
     if (!openedFile) return;
     name = namespace(path.basename(file).replace(/\..*$/, ''));
-    openedFile = removeByteOrderMark(openedFile.trim());
+    openedFile = removeByteOrderMark(openedFile);
     openedFile = wrap(file, name, openedFile);
     if (!options.outputdir) return openedFile;
     fs.writeFileSync(path.join(options.outputdir, name + '.js')
diff --git a/src/diff2html.js b/src/diff2html.js
index 21b0119e..64e138f5 100644
--- a/src/diff2html.js
+++ b/src/diff2html.js
@@ -7,7 +7,6 @@

 (function() {
   var diffParser = require('./diff-parser.js').DiffParser;
-  var fileLister = require('./file-list-printer.js').FileListPrinter;
   var htmlPrinter = require('./html-printer.js').HtmlPrinter;

   function Diff2Html() {
@@ -43,7 +42,7 @@

     var fileList = '';
     if (configOrEmpty.showFiles === true) {
-      fileList = fileLister.generateFileList(diffJson, configOrEmpty);
+      fileList = htmlPrinter.generateFileListSummary(diffJson, configOrEmpty);
     }

     var diffOutput = '';
diff --git a/src/file-list-printer.js b/src/file-list-printer.js
index e408d9b2..1e0a2c61 100644
--- a/src/file-list-printer.js
+++ b/src/file-list-printer.js
@@ -8,11 +8,16 @@
 (function() {
   var printerUtils = require('./printer-utils.js').PrinterUtils;

-  var hoganUtils = require('./hoganjs-utils.js').HoganJsUtils;
+  var hoganUtils;
+
   var baseTemplatesPath = 'file-summary';
   var iconsBaseTemplatesPath = 'icon';

-  function FileListPrinter() {
+  function FileListPrinter(config) {
+    this.config = config;
+
+    var HoganJsUtils = require('./hoganjs-utils.js').HoganJsUtils;
+    hoganUtils = new HoganJsUtils(config);
   }

   FileListPrinter.prototype.generateFileList = function(diffFiles) {
@@ -38,5 +43,5 @@
     });
   };

-  module.exports.FileListPrinter = new FileListPrinter();
+  module.exports.FileListPrinter = FileListPrinter;
 })();
diff --git a/src/hoganjs-utils.js b/src/hoganjs-utils.js
index 9949e5fa..0dda08d7 100644
--- a/src/hoganjs-utils.js
+++ b/src/hoganjs-utils.js
@@ -8,18 +8,19 @@
 (function() {
   var fs = require('fs');
   var path = require('path');
-
   var hogan = require('hogan.js');

   var hoganTemplates = require('./templates/diff2html-templates.js');

-  var templatesPath = path.resolve(__dirname, 'templates');
+  var extraTemplates;

-  function HoganJsUtils() {
+  function HoganJsUtils(configuration) {
+    this.config = configuration || {};
+    extraTemplates = this.config.templates || {};
   }

-  HoganJsUtils.prototype.render = function(namespace, view, params, configuration) {
-    var template = this.template(namespace, view, configuration);
+  HoganJsUtils.prototype.render = function(namespace, view, params) {
+    var template = this.template(namespace, view);
     if (template) {
       return template.render(params);
     }
@@ -27,17 +28,16 @@
     return null;
   };

-  HoganJsUtils.prototype.template = function(namespace, view, configuration) {
-    var config = configuration || {};
+  HoganJsUtils.prototype.template = function(namespace, view) {
     var templateKey = this._templateKey(namespace, view);

-    return this._getTemplate(templateKey, config);
+    return this._getTemplate(templateKey);
   };

-  HoganJsUtils.prototype._getTemplate = function(templateKey, config) {
+  HoganJsUtils.prototype._getTemplate = function(templateKey) {
     var template;

-    if (!config.noCache) {
+    if (!this.config.noCache) {
       template = this._readFromCache(templateKey);
     }

@@ -53,6 +53,7 @@

     try {
       if (fs.readFileSync) {
+        var templatesPath = path.resolve(__dirname, 'templates');
         var templatePath = path.join(templatesPath, templateKey);
         var templateContent = fs.readFileSync(templatePath + '.mustache', 'utf8');
         template = hogan.compile(templateContent);
@@ -66,12 +67,16 @@
   };

   HoganJsUtils.prototype._readFromCache = function(templateKey) {
-    return hoganTemplates[templateKey];
+    return extraTemplates[templateKey] || hoganTemplates[templateKey];
   };

   HoganJsUtils.prototype._templateKey = function(namespace, view) {
     return namespace + '-' + view;
   };

-  module.exports.HoganJsUtils = new HoganJsUtils();
+  HoganJsUtils.prototype.compile = function(templateStr) {
+    return hogan.compile(templateStr);
+  };
+
+  module.exports.HoganJsUtils = HoganJsUtils;
 })();
diff --git a/src/html-printer.js b/src/html-printer.js
index 585d5b66..13f83047 100644
--- a/src/html-printer.js
+++ b/src/html-printer.js
@@ -8,6 +8,7 @@
 (function() {
   var LineByLinePrinter = require('./line-by-line-printer.js').LineByLinePrinter;
   var SideBySidePrinter = require('./side-by-side-printer.js').SideBySidePrinter;
+  var FileListPrinter = require('./file-list-printer.js').FileListPrinter;

   function HtmlPrinter() {
   }
@@ -22,5 +23,10 @@
     return sideBySidePrinter.generateSideBySideJsonHtml(diffFiles);
   };

+  HtmlPrinter.prototype.generateFileListSummary = function(diffJson, config) {
+    var fileListPrinter = new FileListPrinter(config);
+    return fileListPrinter.generateFileList(diffJson);
+  };
+
   module.exports.HtmlPrinter = new HtmlPrinter();
 })();
diff --git a/src/line-by-line-printer.js b/src/line-by-line-printer.js
index b07eb53c..d230bedd 100644
--- a/src/line-by-line-printer.js
+++ b/src/line-by-line-printer.js
@@ -11,7 +11,8 @@
   var utils = require('./utils.js').Utils;
   var Rematch = require('./rematch.js').Rematch;

-  var hoganUtils = require('./hoganjs-utils.js').HoganJsUtils;
+  var hoganUtils;
+
   var genericTemplatesPath = 'generic';
   var baseTemplatesPath = 'line-by-line';
   var iconsBaseTemplatesPath = 'icon';
@@ -19,6 +20,9 @@

   function LineByLinePrinter(config) {
     this.config = config;
+
+    var HoganJsUtils = require('./hoganjs-utils.js').HoganJsUtils;
+    hoganUtils = new HoganJsUtils(config);
   }

   LineByLinePrinter.prototype.makeFileDiffHtml = function(file, diffs) {
diff --git a/src/side-by-side-printer.js b/src/side-by-side-printer.js
index bbf1dc8d..5e3033b3 100644
--- a/src/side-by-side-printer.js
+++ b/src/side-by-side-printer.js
@@ -11,7 +11,8 @@
   var utils = require('./utils.js').Utils;
   var Rematch = require('./rematch.js').Rematch;

-  var hoganUtils = require('./hoganjs-utils.js').HoganJsUtils;
+  var hoganUtils;
+
   var genericTemplatesPath = 'generic';
   var baseTemplatesPath = 'side-by-side';
   var iconsBaseTemplatesPath = 'icon';
@@ -26,6 +27,9 @@

   function SideBySidePrinter(config) {
     this.config = config;
+
+    var HoganJsUtils = require('./hoganjs-utils.js').HoganJsUtils;
+    hoganUtils = new HoganJsUtils(config);
   }

   SideBySidePrinter.prototype.makeDiffHtml = function(file, diffs) {
diff --git a/test/file-list-printer-tests.js b/test/file-list-printer-tests.js
index a502a46f..60ea3208 100644
--- a/test/file-list-printer-tests.js
+++ b/test/file-list-printer-tests.js
@@ -1,6 +1,6 @@
 var assert = require('assert');

-var fileListPrinter = require('../src/file-list-printer.js').FileListPrinter;
+var fileListPrinter = new (require('../src/file-list-printer.js').FileListPrinter)();

 describe('FileListPrinter', function() {
   describe('generateFileList', function() {
diff --git a/test/hogan-cache-tests.js b/test/hogan-cache-tests.js
index 190bf6f8..3bb754ac 100644
--- a/test/hogan-cache-tests.js
+++ b/test/hogan-cache-tests.js
@@ -1,6 +1,6 @@
 var assert = require('assert');

-var HoganJsUtils = require('../src/hoganjs-utils.js').HoganJsUtils;
+var HoganJsUtils = new (require('../src/hoganjs-utils.js').HoganJsUtils)();
 var diffParser = require('../src/diff-parser.js').DiffParser;

 describe('HoganJsUtils', function() {
@@ -21,16 +21,28 @@ describe('HoganJsUtils', function() {
       });
       assert.equal(emptyDiffHtml, result);
     });
+
     it('should render view without cache', function() {
       var result = HoganJsUtils.render('generic', 'empty-diff', {
         contentClass: 'd2h-code-line',
         diffParser: diffParser
       }, {noCache: true});
-      assert.equal(emptyDiffHtml + '\n', result);
+      assert.equal(emptyDiffHtml, result);
     });
+
     it('should return null if template is missing', function() {
-      var result = HoganJsUtils.render('generic', 'missing-template', {}, {noCache: true});
+      var hoganUtils = new (require('../src/hoganjs-utils.js').HoganJsUtils)({noCache: true});
+      var result = hoganUtils.render('generic', 'missing-template', {});
       assert.equal(null, result);
     });
+
+    it('should allow templates to be overridden', function() {
+      var emptyDiffTemplate = HoganJsUtils.compile('&lt;p&gt;&lt;/p&gt;');
+
+      var config = {templates: {'generic-empty-diff': emptyDiffTemplate}};
+      var hoganUtils = new (require('../src/hoganjs-utils.js').HoganJsUtils)(config);
+      var result = hoganUtils.render('generic', 'empty-diff', {myName: 'Rodrigo Fernandes'});
+      assert.equal('&lt;p&gt;Rodrigo Fernandes&lt;/p&gt;', result);
+    });
   });
 });
diff --git a/test/line-by-line-tests.js b/test/line-by-line-tests.js
index 1cd92073..8869b3df 100644
--- a/test/line-by-line-tests.js
+++ b/test/line-by-line-tests.js
@@ -14,7 +14,7 @@ describe('LineByLinePrinter', function() {
         '            File without changes\n' +
         '        &lt;/div&gt;\n' +
         '    &lt;/td&gt;\n' +
-        '&lt;/tr&gt;\n';
+        '&lt;/tr&gt;';

       assert.equal(expected, fileHtml);
     });
@@ -422,7 +422,6 @@ describe('LineByLinePrinter', function() {
         '        &lt;/div&gt;\n' +
         '    &lt;/td&gt;\n' +
         '&lt;/tr&gt;\n' +
-        '\n' +
         '                &lt;/tbody&gt;\n' +
         '            &lt;/table&gt;\n' +
         '        &lt;/div&gt;\n' +
diff --git a/test/side-by-side-printer-tests.js b/test/side-by-side-printer-tests.js
index 76625f8e..771daaa5 100644
--- a/test/side-by-side-printer-tests.js
+++ b/test/side-by-side-printer-tests.js
@@ -14,7 +14,7 @@ describe('SideBySidePrinter', function() {
         '            File without changes\n' +
         '        &lt;/div&gt;\n' +
         '    &lt;/td&gt;\n' +
-        '&lt;/tr&gt;\n';
+        '&lt;/tr&gt;';

       assert.equal(expectedRight, fileHtml.right);
       assert.equal(expectedLeft, fileHtml.left);
@@ -324,7 +324,6 @@ describe('SideBySidePrinter', function() {
         '        &lt;/div&gt;\n' +
         '    &lt;/td&gt;\n' +
         '&lt;/tr&gt;\n' +
-        '\n' +
         '                    &lt;/tbody&gt;\n' +
         '                &lt;/table&gt;\n' +
         '            &lt;/div&gt;\n' +

From f3cadb96677d0eb82fc2752dc3ffbf35ca9b5bdb Mon Sep 17 00:00:00 2001
From: Rodrigo Fernandes &lt;rtfrodrigo@gmail.com&gt;
Date: Sat, 15 Oct 2016 13:21:22 +0100
Subject: [PATCH 2/2] Allow uncompiled templates

---
 README.md                 |  3 +++
 src/hoganjs-utils.js      |  7 +++++++
 test/hogan-cache-tests.js | 24 +++++++++++++++++++++++-
 3 files changed, 33 insertions(+), 1 deletion(-)

diff --git a/README.md b/README.md
index 132c8a28..46909f25 100644
--- a/README.md
+++ b/README.md
@@ -98,6 +98,9 @@ The HTML output accepts a Javascript object with configuration. Possible options
   - `synchronisedScroll`: scroll both panes in side-by-side mode: `true` or `false`, default is `false`
   - `matchWordsThreshold`: similarity threshold for word matching, default is 0.25
   - `matchingMaxComparisons`: perform at most this much comparisons for line matching a block of changes, default is `2500`
+  - `templates`: object with previously compiled templates to replace parts of the html
+  - `rawTemplates`: object with raw not compiled templates to replace parts of the html
+  &gt; For more information regarding the possible templates look into [src/templates](https://github.com/rtfpessoa/diff2html/tree/master/src/templates)

 ## Diff2HtmlUI Helper

diff --git a/src/hoganjs-utils.js b/src/hoganjs-utils.js
index 0dda08d7..b2e9c275 100644
--- a/src/hoganjs-utils.js
+++ b/src/hoganjs-utils.js
@@ -17,6 +17,13 @@
   function HoganJsUtils(configuration) {
     this.config = configuration || {};
     extraTemplates = this.config.templates || {};
+
+    var rawTemplates = this.config.rawTemplates || {};
+    for (var templateName in rawTemplates) {
+      if (rawTemplates.hasOwnProperty(templateName)) {
+        if (!extraTemplates[templateName]) extraTemplates[templateName] = this.compile(rawTemplates[templateName]);
+      }
+    }
   }

   HoganJsUtils.prototype.render = function(namespace, view, params) {
diff --git a/test/hogan-cache-tests.js b/test/hogan-cache-tests.js
index 3bb754ac..a34839c0 100644
--- a/test/hogan-cache-tests.js
+++ b/test/hogan-cache-tests.js
@@ -36,7 +36,7 @@ describe('HoganJsUtils', function() {
       assert.equal(null, result);
     });

-    it('should allow templates to be overridden', function() {
+    it('should allow templates to be overridden with compiled templates', function() {
       var emptyDiffTemplate = HoganJsUtils.compile('&lt;p&gt;&lt;/p&gt;');

       var config = {templates: {'generic-empty-diff': emptyDiffTemplate}};
@@ -44,5 +44,27 @@ describe('HoganJsUtils', function() {
       var result = hoganUtils.render('generic', 'empty-diff', {myName: 'Rodrigo Fernandes'});
       assert.equal('&lt;p&gt;Rodrigo Fernandes&lt;/p&gt;', result);
     });
+
+    it('should allow templates to be overridden with uncompiled templates', function() {
+      var emptyDiffTemplate = '&lt;p&gt;&lt;/p&gt;';
+
+      var config = {rawTemplates: {'generic-empty-diff': emptyDiffTemplate}};
+      var hoganUtils = new (require('../src/hoganjs-utils.js').HoganJsUtils)(config);
+      var result = hoganUtils.render('generic', 'empty-diff', {myName: 'Rodrigo Fernandes'});
+      assert.equal('&lt;p&gt;Rodrigo Fernandes&lt;/p&gt;', result);
+    });
+
+    it('should allow templates to be overridden giving priority to compiled templates', function() {
+      var emptyDiffTemplate = HoganJsUtils.compile('&lt;p&gt;&lt;/p&gt;');
+      var emptyDiffTemplateUncompiled = '&lt;p&gt;Not used!&lt;/p&gt;';
+
+      var config = {
+        templates: {'generic-empty-diff': emptyDiffTemplate},
+        rawTemplates: {'generic-empty-diff': emptyDiffTemplateUncompiled}
+      };
+      var hoganUtils = new (require('../src/hoganjs-utils.js').HoganJsUtils)(config);
+      var result = hoganUtils.render('generic', 'empty-diff', {myName: 'Rodrigo Fernandes'});
+      assert.equal('&lt;p&gt;Rodrigo Fernandes&lt;/p&gt;', result);
+    });
   });
 });
</code></pre>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="code"/><summary type="html"><![CDATA[this is how you can display code diffs]]></summary></entry></feed>